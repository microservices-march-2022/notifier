name: Run tests
on: [push]


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
    api-test:
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:15-alpine
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: messenger_test
                    PGPORT: 5433
                ports:
                    - 5433:5433
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
            rabbitmq:
                image: rabbitmq:3.11.4-management-alpine
                ports:
                    - 5672:5672
        steps:
            - uses: actions/checkout@v2
            - name: Read .tool-versions
              uses: marocchino/tool-versions-action@v1
              id: versions

            - name: Use Node.js ${{ steps.versions.outputs.nodejs }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ steps.versions.outputs.nodejs }}

            - name: Install Dependencies
              run: npm install
              
            - name: Prepare database
              run: npm run refresh-db-test

            - name: API testing
              run: npm test
              env:
                  NODE_ENV: test'

    build-and-push:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        
        steps:
        - name: Checkout repository
            uses: actions/checkout@v3
            
        - name: Read .tool-versions
            uses: marocchino/tool-versions-action@v1
            id: versions
            
        - name: Write node version to docker container
          run: sed -i "1s/.*/FROM node:${{ steps.versions.outputs.nodejs }}-bullseye-slim/"
    
        - name: Log in to the Container registry
            uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
            with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
    
        - name: Extract metadata (tags, labels) for Docker
            id: meta
            uses: docker/metadata-action@v4
            with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                tags: |
                    # minimal
                    type=edge
    
        - name: Build and push Docker image
            uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
            with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
